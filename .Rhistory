1123-1077
qt(46, 8, lower.tail = F)
pt(46, 9, lower.tail = F)
pt(46, 8, lower.tail = F)
1081-119
1119-1081
pt(38, 8, lower.tail = F)
1169-1031
pt(138, 8, lower.tail = F)
1120-1080
pt(40, 8, lower.tail = F)
choose(3,4)*.5^3
pbinom(3, size = 4, prob = 0.5, lower.tail = F)
pbinom(2, size = 4, prob = 0.5, lower.tail = F)
10/1787
?ppois
ppois(0.005595971, 0.01)
ppois(0.005595971, 0.01, lower.tail = F)
ppois(10/1787, 0.01, lower.tail = F)
ppois(0.01, 10/1787, lower.tail = F)
10/1787 - 0.01
z <- qnorm(1 - 0.05)
ppois(0.0044, 0.01, lower.tail = F)
-3 - 1 + c(-1,1)*qt(0.975, 16)*sp*(1/9 + 1/9)^0.5
?qt
0.3/sqrt(18)
4/(0.07071068*4)
pt(14.14214, 16)
0.3/sqrt(18)
4/0.07071068
pt(56.56854, 16)
pt(56.56854, 17)
pt(56.56854, 17, lower.tail = F)
pnorm(0.01 + .95*0.04/10, mean = 0.01, sd = 0.04/10, lower.tail = F)
?pnprm
?pnprm
?pnorm
pnorm(0.01 + 1.645*0.04/10, mean = 0.01, sd = 0.04/10, lower.tail = F)
pnorm(0.01 + 1.645*0.04/10, mean = 0, sd = 0.04/10, lower.tail = F)
pnorm(1.645*0.04/10, mean = 0.01, sd = 0.04/10, lower.tail = F)
pnorm(1.645*0.04/sqrt(180), mean = 0.01, sd = 0.04/sqrt(180), lower.tail = F)
pnorm(1.645*0.04/sqrt(160), mean = 0.01, sd = 0.04/sqrt(160), lower.tail = F)
pnorm(1.645*0.04/sqrt(140), mean = 0.01, sd = 0.04/sqrt(140), lower.tail = F)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2,1,3,1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
lm(y~x)
?slope
lm(y~x) -1
lm(y~x -1)
data(mtcars)
y<- mtcars$mpg
x<- mtcars$wt
lm(y~x)
- c(8.58, 10.46, 9.01, 9.64, 8.86)
x<-  c(8.58, 10.46, 9.01, 9.64, 8.86)
sd(x)
mean(x)
8.58/9.31
8.58-9.31
-0.73/0.7511325
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
0.8-0.573
(0.8-0.573) ^2
sum((x-mean(x))^2)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
w <- c(2, 1, 3, 1)
sum(w(x-mean(x))^2)
w(x)
w <- c(2, 1, 3, 1)
w - x
w*(x-mean(x))^2
sum(w*(x-mean(x))^2)
mean(x)^2
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
beta1 <- cor(y,x) *sd(y)/sd(x)
beta0 <- mean(y) -beta1*mean(x)
e <- y - beta0 - beta1 *x
sigma <- sqrt(sum(e^2)/(n-2))
n = 9
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1/n = mean(x)^2/ssx)^0.5 * sigma
seBeta0 <- (1/n + mean(x)^2/ssx)^0.5 * sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <- beta0/seBeta0 ; tBeta1 <- beta1/seBetal
tBeta0 <- beta0/seBeta0 ; tBeta1 <- beta1/seBeta1
pBeta0 <- 2* pt(abs(tBeta0), df = n-2, lower.tail = F)
pBeta1 <- 2* pt(abs(tBeta1), df=n-2, lower.tail = F)
pBeta1
sd(e)
sigma
data("mtcars")
x <- mtcars$wt
y <- mtcars$mpg
lm(y~x)
n <- length(y)
fit <- lm(y~x)
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1) * qt(0.975, df = fit$df.residual) *sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(0.975, df = fit$df.residual) * sumCoef[2,2]
?mtcars
fit <- lm(y~x[4])
x[4]
head(x)
x
x <- 3 =< x < 4
x <- 3 == x < 4
x <- x[x == 3 & x <4]
lm(y ~x)
x
as.numeric(x)
x
x <- mtcars$wt
xnot <- beta0 + beta1
predict(fit, newdata = 3000)
predict(fit, newdata = 3)
pt(predict(fit, newdata=3))
pt(predict(fit, newdata=3), df = n -2)
summary(fit)
fit <- lm(y~x)
predict(fit, newdata = data.fram(x = 3), interval = "confidence")
predict(fit, newdata = data.frame(x = 3), interval = "confidence")
newx <- predict(fit, newdata = data.frame(x = 3), interval = "confidence")
?predict
predict.lm(fit, newdata = data.frame(x = 3), interval = "confidence")
x <- x/2
fit <- lm(y~x)
sumCoefx <- summary(fit)$coefficents
sumCoefx[1,1] + c(-1,1) *qt(0.975, df = n-2)*sumCoefx[1,2]
summary(fit)
x
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1) * qt(0.975, df = fit$df.residual) *sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(0.975, df = fit$df.residual) * sumCoef[2,2]
ssx
x<- mtcars$wt
ssx
beta0
beta1
fit <- lm (y~x)
predict(fit, newdata = data.frame(x=3), interval = "coefficient")
predict(fit, newdata = data.frame(x=3), interval = "confidence")
newx <- predict(fit, newdata = data.frame(x =3))
newx
newx <- predict(fit, newdata = data.frame(x =3), interval = "confidence")
new2
newx
newx <- predict(fit, newdata = data.frame(x =4), interval = "confidence")
newx
sumCoef[1,1] + c(-1,1) * qt(0.975, df = fit$df.residual) *sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(0.975, df = fit$df.residual) * sumCoef[2,2]
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm (y~x)
sumCoef[1,1] + c(-1,1) * qt(0.975, df = fit$df.residual) *sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(0.975, df = fit$df.residual) * sumCoef[2,2]
summary(fit)
mean(x)
predict(fit, newdata = data.frame(x = 3.21725), interval = "confidence")
summary(mtcars)
?mtcars
predict(fit, newdata = data.frame(x = 3), interval = "confidence")
beta0/beta1
ssx
ssx/0.26
0.26/ssx
ssx/beta0
beta0/beta1
data(mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(mtcars$cyl)
lm(mpg ~ factor(cyl), data = mtcars)
lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
lm(mpg ~ I(wt) + factor(cyl = 4,8), data = mtcars)
lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
fit <- lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
summary(fit)
hatvalues(fit)
max(hatvalues(fit))
?lm
fit1 <- lm(mpg ~ cyl, data = mtcars)
fit <- update(fit1, mpg~cyl + wt, data = mtcars)
anova(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hatvalues
lm( y~ x)
hatvalues(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
hatvalues(fit)
dfbetas(max(hatvalues(fit)))
dfbetas(max(fit))
dfbeta(fit)
lm(y~x)
hatvalues(lm(y~x))
hatvalues(fit)
dfbeta(fit)
dfit <- dfbeta(fit)
hatvalues(dfit)
dfbetas(fit)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
fit <- lm(mpg~cyl, data = mtcars)
fit1 <- lm(fit, mpg~ cyl + wt, data = mtcars)
fit1 <- lm(fit, mpg ~ cyl + wt, data = mtcars)
fit1 <- update(fit, mpg ~ cyl + wt, data = mtcars)
anova(fit, fit1)
fit1 <- lm(fit, mpg ~ factor(cyl) + wt, data = mtcars)
fit1 <- lm(fit, mpg ~ factor(cyl) + wt, data = mtcars)
fit <- lm(mpg~factor(cyl), data = mtcars)
fit1 <- update(fit, mpg~ factor(cyl) + wt, data = mtcars)
anova(fit, fit1)
fit1 <- lm(mpg~factor(cyl) + wt, data = mtcars)
anova(fit, fit1)
fit <- lm(mpg~factor(cyl) + wt, data = mtcars)
anova(fit, fit1)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit_inter <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit, fit_inter, test = "Chisq")
anova(fit, fit_inter)
library(MASS)
?shuttle
?glm
head(shuttle)
glm(use ~wind)
glm(use ~wind, data = shuttle)
glm(use ~factor(wind), data = shuttle)
class(shuttle$use)
class(shuttle$wind)
as.numeric(shuttle$use)
as.logical(shuttle$use)
as.numeric(shuttle$use)
glm(as.numeric(use) ~ factor(wind), data = shuttle)
fit <- glm(as.numeric(use) ~ factor(wind), data = shuttle)
summary(fit)
log(2e-16)/log(0.9)
log(0.9)/log(2e-16)
logit(fit)
binomial(link = "logit")
glm(formula = as.numeric(use) ~ factor(wind), family= "binomial", data = shuttle)
glm(formula = as.numeric(use) ~ factor(wind), family= "gaussian", data = shuttle)
log(1.4375)/ log(-0.007812)
fit <- glm(as.numeric(use) ~ factor(wind), data = shuttle)
anova(fit)
fit <- glm(as.numeric(use) ~ factor(wind = tail))
fit <- glm(as.numeric(use) ~ factor(wind = tail), data = shuttle)
fit <- glm(as.numeric(use) ~ factor(wind == tail), data = shuttle)
alrightfine <- as.numeric(shuttle$use == "auto")
fit <- glm(use ~ factor(wind) -1, family = "binomial", data = shuttle)
Coef <- coef(summary(fit))
Coef
coef.odds <- exp(c(Coef[1,1], Coef[2,1]))
odds.ratio <- coef.odds[1]/coef.odds[2]
(odds.ratio <- coef.odds[1]/coef.odds[2])
coef.odds[2]/coef.odds[1]
fit1 <- glm(use ~factor(wind) + magn -1, family = "binomial", data = shuttle)
ccc <- coef(summary(fit1))
ccc
exp.sm <- exp(c(ccc[1,1], ccc[2,1]))
(odds.ratio <- exp.sm[1]/exp.sm[2])
fit1 <- glm(1- use ~factor(wind) + magn -1, family = "binomial", data = shuttle)
fit1 <- glm(use ~factor(wind) + magn, family = "binomial", data = shuttle)
ccc <- coef(summary(fit1))
ccc
fit <- glm(I(1-use) ~ factor(wind) -1, family = "binomial", data = shuttle)
fit
fit <- glm(use ~ factor(wind) -1, family = "binomial", data = shuttle)
fit
fit <- glm(I(1 - use) ~ factor(wind) -1, family = "binomial", data = shuttle)
use <- as.numeric(shuttle$use)
fit <- glm(I(1 - use) ~ factor(wind) -1, family = "binomial", data = shuttle)
fit <- glm(1 - use ~ factor(wind) -1, family = "binomial", data = shuttle)
fit
data("InsectSprays")
str(InsectSprays)
head(InsectSprays)
glm(count ~ factor(spray), family = "Poisson", data = InsectSprays)
glm(count ~ factor(spray), family = "poisson", data = InsectSprays)
fit <- glm(count ~ factor(spray), family = "poisson", data = InsectSprays)
coefs <- coef(summary(fit))
coefs
rr <- coefs[1,4]/coefs[2,4]
rr
ceofs <- exp(fit)
ceofs <- exp(coef(fit))
ceofs
14.5/1.057
fit <- glm(count ~ factor(spray) -1, family = "poisson", data = InsectSprays)
ceofs <- exp(coef(fit))
ceofs
14.5/15.33
x <- c(1,2,3,4,5)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(0,5)
knots <- seq(0,10)
knots <- seq(0,11)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
xmat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y~xmat -1))
yhat
coef(summary(lm(y~xmat -1)))
(yhat[10]-yhat[6])/yhat[4]
(yhat[10]-yhat[6])/4
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
head(training)
plot(mixtures$Cement, mixtures$Cement)
cut <- cut2(training$Age)
plot(mixtures, mixtures$Cement)
plot(mixtures$FlyAsh, mixtures$Cement)
plot(mixtures$Age, mixtures$Cement)
hist(log10(mixtures$Superplasticizer))
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
P <- preProcess(training, method = "pca")
P
?preProcess
P <- preProcess(training, method = "pca", thresh = 0.9)
P
head(training)
P <- preProcess(training$IL_11, method = "pca", thresh = 0.9)
P <- preProcess(training[,IL], method = "pca", thresh = 0.9)
dim(training)
dim(training$IL_11)
dim(training$IL_11:training$IL_8)
dim(training$IL_11,training$IL_8)
str(training)
training[,15]
prComp(training[,grep("^IL", names(training))])
prcomp(training[,grep("^IL", names(training))])
preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.9)
ILdata <- training[,grep("^IL", names(training))]
preProcess(training[,grep("^IL", names(training))], method = "pca")
preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.8)
point8 <- preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.8)
point95 <- preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.8)
p8 <- predict(point8, ILdata +1)
p95 <- predict(point95, ILdata+1)
train8 <- train(ILdata$type~., method = "glm", data = point8)
train8 <- train(ILdata$type~., method = "glm", data = p8)
train8 <- train(ILdata, method = "glm", data = p8)
point95
point8
train(ILdata ~., data = training, method = "glm")
library(knitr)
library(ggplot2)
library(dplyr)
activity <- read.csv("activity.csv")
getwd()
setwd("~/Desktop/Work/Coursera/Reproducible")
list.files()
setwd("./RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
head(activity)
head(activity)
head(activity)
total.steps <- tapply(activity.na$steps, activity.na$date, sum)
activity.na <- na.omit(activity)
activity.na$date <- as.Date(activity.na$date)
total.steps <- tapply(activity.na$steps, activity.na$date, sum)
hist(total.steps, col = "green", main = "",
xlab = "Total Number of Steps per Day", breaks = 15)
mean(total.steps)
median(total.steps)
activity.mean <- aggregate(x = list(steps = activity.na$steps),
by = list(interval = activity.na$interval),
FUN = mean)
unlink('PA1_template_cache', recursive = TRUE)
mean(total.steps)
median(total.steps)
activity.mean <- aggregate(x = list(steps = activity.na$steps),
by = list(interval = activity.na$interval),
FUN = mean)
maximuminterval <- activity.mean[which.max(activitymean$steps),]
maximuminterval
maximuminterval <- activity.mean[which.max(activity.mean$steps),]
maximuminterval
activity.mean <- aggregate(x = list(steps = activity.na$steps),
by = list(interval = activity.na$interval),
FUN = mean)
maximuminterval <- activity.mean[which.max(activity.mean$steps),]
maximuminterval
maximuminterval
activitywithNA <- sum(is.na(activity$steps))
activitywithNA
mean.fill.interval <- function(steps, interval) {
filled.interval <- NA
if (!is.na(steps))
filled.interval <- c(steps)
else
filled.interval <- (activity.mean[activity.mean$interval == interval, "steps"])
return(filled.interval)
}
activity.fill <- activity
activity.fill$steps <- mapply(mean.fill.interval, activity.fill$steps,
activity.fill$interval)
activity.steps <- tapply(activity.fill$steps, activity.fill$date, FUN = sum)
mean(activity.steps)
png("firstplot.png")
firstplot <- hist(total.steps, col = "green", main = "",
xlab = "Total Number of Steps per Day", breaks = 15)
print(firstplot)
dev.off()
png("secondplot.png")
secondplot <- ggplot(activity.mean, aes(x = interval, y = steps)) +
geom_line(color = "green", size = 0.5) +
theme_bw() +
xlab("5 minute interval") +
ylab("Average Number of Steps Across all Days")
print(secondplot)
dev.off()
png("thirdplot.png")
thirdplot <- hist(activity.steps, col = "green", main = "",
xlab = "Total steps per day", breaks = 15)
print(thirdplot)
dev.off()
activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
png("fourthplot.png")
fourthplot <- activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) +
geom_line(color = "green") + theme_bw() +
facet_grid(day ~ .) + xlab("5 minute interval") + ylab("Number of steps")
print(fourthplot)
dev.off()
activity.day <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {"weekend"}
else {"weekday"}
}
activity.fill$day <- as.factor(sapply(activity.fill$date, activity.day))
activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) +
geom_line(color = "green") + theme_bw() +
facet_grid(day ~ .) + xlab("5 minute interval") + ylab("Number of steps")
png("fourthplot.png")
fourthplot <- activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) +
geom_line(color = "green") + theme_bw() +
facet_grid(day ~ .) + xlab("5 minute interval") + ylab("Number of steps")
print(fourthplot)
dev.off()
png("thirdplot.png")
thirdplot <- hist(activity.steps, col = "green", main = "",
xlab = "Total steps per day", breaks = 15)
print(thirdplot)
dev.off()
png("secondplot.png")
secondplot <- ggplot(activity.mean, aes(x = interval, y = steps)) +
geom_line(color = "green", size = 0.5) +
theme_bw() +
xlab("5 minute interval") +
ylab("Average Number of Steps Across all Days")
print(secondplot)
dev.off()
png("firstplot.png")
firstplot <- hist(total.steps, col = "green", main = "",
xlab = "Total Number of Steps per Day", breaks = 15)
print(firstplot)
dev.off()
median(total.steps)
activity.na <- na.omit(activity)
activity.na$date <- as.Date(activity.na$date)
total.steps <- tapply(activity.na$steps, activity.na$date, sum)
mean(total.steps)
