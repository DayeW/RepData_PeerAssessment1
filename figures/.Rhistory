fit <- glm(I(1 - use) ~ factor(wind) -1, family = "binomial", data = shuttle)
fit <- glm(1 - use ~ factor(wind) -1, family = "binomial", data = shuttle)
fit
data("InsectSprays")
str(InsectSprays)
head(InsectSprays)
glm(count ~ factor(spray), family = "Poisson", data = InsectSprays)
glm(count ~ factor(spray), family = "poisson", data = InsectSprays)
fit <- glm(count ~ factor(spray), family = "poisson", data = InsectSprays)
coefs <- coef(summary(fit))
coefs
rr <- coefs[1,4]/coefs[2,4]
rr
ceofs <- exp(fit)
ceofs <- exp(coef(fit))
ceofs
14.5/1.057
fit <- glm(count ~ factor(spray) -1, family = "poisson", data = InsectSprays)
ceofs <- exp(coef(fit))
ceofs
14.5/15.33
x <- c(1,2,3,4,5)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(0,5)
knots <- seq(0,10)
knots <- seq(0,11)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
xmat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y~xmat -1))
yhat
coef(summary(lm(y~xmat -1)))
(yhat[10]-yhat[6])/yhat[4]
(yhat[10]-yhat[6])/4
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mixtures)
head(training)
plot(mixtures$Cement, mixtures$Cement)
cut <- cut2(training$Age)
plot(mixtures, mixtures$Cement)
plot(mixtures$FlyAsh, mixtures$Cement)
plot(mixtures$Age, mixtures$Cement)
hist(log10(mixtures$Superplasticizer))
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
P <- preProcess(training, method = "pca")
P
?preProcess
P <- preProcess(training, method = "pca", thresh = 0.9)
P
head(training)
P <- preProcess(training$IL_11, method = "pca", thresh = 0.9)
P <- preProcess(training[,IL], method = "pca", thresh = 0.9)
dim(training)
dim(training$IL_11)
dim(training$IL_11:training$IL_8)
dim(training$IL_11,training$IL_8)
str(training)
training[,15]
prComp(training[,grep("^IL", names(training))])
prcomp(training[,grep("^IL", names(training))])
preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.9)
ILdata <- training[,grep("^IL", names(training))]
preProcess(training[,grep("^IL", names(training))], method = "pca")
preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.8)
point8 <- preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.8)
point95 <- preProcess(training[,grep("^IL", names(training))], method = "pca", thresh = 0.8)
p8 <- predict(point8, ILdata +1)
p95 <- predict(point95, ILdata+1)
train8 <- train(ILdata$type~., method = "glm", data = point8)
train8 <- train(ILdata$type~., method = "glm", data = p8)
train8 <- train(ILdata, method = "glm", data = p8)
point95
point8
train(ILdata ~., data = training, method = "glm")
if(file.exists("activity.zip"))
)
if(file.exists("activity.zip")) {
unzip("activity.zip")
activity <- read.csv("activit.zip")
}
activity
if(file.exists("activity.zip")) {
unzip("activity.zip")
activity <- read.csv("activity.zip")
}
head(activity)
if(!file.exists("activity.zip")) {
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
setwd("~/Desktop/Work/Coursera/Reproducible")
list.files()
setwd("./RepData_PeerAssessment1")
list.files
list.files()
unzip("activity.zip")
list.files()
activity <- read.csv("activity.csv")
head(activity)
activity.na <- na.omit(activity)
head(activity.na)
activity.na$date <- as.Date(activity.na$date)
activity.na$date
totalsteps <- tapply(steps~date, activity.na, sum)
totalsteps <- tapply(activity.na$steps, activity.na$date, sum)
totalsteps
head(activity)
head(activity)
totalsteps <- tapply(activity.na$steps, activity.na$date, sum)
hist(totalsteps, col = "green", main = "", xlab = "Total Number of Steps per Day", breaks = 30)
mean(totalsteps)
median(totalsteps)
head(activity)
activitymean <- aggregate(steps ~ interval, activity.na, mean)
activitymean <- tapply(activity.na$steps, activity.na$interval, mean)
head(activitymean)
?ddply
library(knitr)
library(ggplot2)
library(scales)
library(plyr)
?ddply
activitymean <- ddply(activity.na, ~interval, .fun = mean(steps)
)
activitymean <- ddply(activity.na, ~interval, .fun = mean(activity.na$steps))
activitymean <- aggregate(x = list(steps = activity.na$steps),
by = list(interval = activity.na$interval),
fun = mean)
activitymean <- aggregate(x = list(steps = activity.na$steps),
by = list(interval = activity.na$interval),
FUN = mean)
activitymean <- aggregate(x = list(steps = activity.na$steps),
by = list(interval = activity.na$interval),
FUN = mean)
ggplot(activitymean, aes(x = interval, y = steps)) +
geom_line() +
xlab("5 minute interval") +
ylab("Average Number of Steps")
?ggplot
ggplot(activitymean, aes(x = interval, y = steps, color = "green")) +
geom_line() +
xlab("5 minute interval") +
ylab("Average Number of Steps")
ggplot(activitymean, aes(x = interval, y = steps, color)) +
geom_line() +
xlab("5 minute interval") +
ylab("Average Number of Steps")
ggplot(activitymean, aes(x = interval, y = steps, color = type)) +
geom_line() +
xlab("5 minute interval") +
ylab("Average Number of Steps")
?geom_line
ggplot(activitymean, aes(x = interval, y = steps)) +
geom_line(aes = "green") +
xlab("5 minute interval") +
ylab("Average Number of Steps")
ggplot(activitymean, aes(x = interval, y = steps)) +
geom_line(color = "green", size = 0.5) +
xlab("5 minute interval") +
ylab("Average Number of Steps")
ggplot(activitymean, aes(x = interval, y = steps)) +
geom_line(color = "green", size = 0.5) +
theme_bw(color = "white")
xlab("5 minute interval") +
ylab("Average Number of Steps")
ggplot(activitymean, aes(x = interval, y = steps)) +
geom_line(color = "green", size = 0.5) +
theme_bw(color = "white") +
xlab("5 minute interval") +
ylab("Average Number of Steps")
ggplot(activitymean, aes(x = interval, y = steps)) +
geom_line(color = "green", size = 0.5) +
theme_bw() +
xlab("5 minute interval") +
ylab("Average Number of Steps")
maximuminterval <- activitymean[which.max(activitymean$steps),]
maximuminterval <- activitymean[which.max(activitymean$steps),]
maximuminterval <- activitymean[which.max(activitymean$steps),]
maximuminterval
activitywithNA <- sum(is.na(activity$steps))
activitywithNA
activity.fill <- activity
activity.fill$steps <- impute(activity.fill$steps, FUN = mean)
library(Hmisc)
activity.fill <- activity
activity.fill$steps <- impute(activity.fill$steps, FUN = mean)
?scales
head(activity.fill)
activity.fill <- activity
activity.fill$steps <- impute(activity.fill$steps, FUN = mean)
activity.fill <- tapply(activity.fill$steps, activity.fill$date, sum)
head(activity.fill)
hist(activity.fill, col = "green", main = "Histogram of Total Number Steps per Day 2",
xlab = "Total steps per day", breaks = 15)
hist(activity.fill, col = "green", xlab = "Total steps per day", breaks = 15)
activity.fill <- activity
activity.fill$steps <- impute(activity.fill$steps, FUN = mean)
activity.steps <- tapply(activity.fill$steps, activity.fill$date, sum)
hist(activity.steps, col = "green", main = "",
xlab = "Total steps per day", breaks = 15)
mean(activity.steps)
median(activity.steps)
mean(activity.steps)
activity.fill <- activity
activity.fill <- aggregate(x = list(steps = activity.fill$steps),
by = list(interval = activity.fill$interval),
FUN = mean)
activity.steps <- tapply(activity.fill$steps, activity.fill$date, sum)
head(activity.fill)
activity.fill <- activity
activity.steps <- tapply(activity.fill$steps, activity.fill$date, sum)
activity.fill$steps[which(is.na(activity.fill$steps))] <- as.integer(mean(activity.fill$steps[is.na(activity.fill$steps)]))
activity.steps <- tapply(activity.fill$steps, activity.fill$date, sum)
head(activity.fill)
activity.fill <- activity
activity.fill <- aggregate(steps ~interval, activity.na, mean)
activity.fill$steps[which(is.na(activity.fill$steps))] <- as.integer(mean(activity.fill$steps[is.na(activity.fill$steps)]))
activity.steps <- tapply(activity.fill$steps, activity.fill$date, sum)
activity.fill <- activity
activity.interval <- aggregate(steps ~interval, activity.na, mean)
activity.fill <- merge(activity.fill, activity.interbal, by ="interval", all.y = F)
activity.fill$steps[which(is.na(activity.fill$steps))] <- as.integer(mean(activity.fill$steps[is.na(activity.fill$steps)]))
activity.steps <- tapply(activity.fill$steps, activity.fill$date, sum)
activity.fill <- activity
activity.interval <- aggregate(steps ~interval, activity.na, mean)
activity.fill <- merge(activity.fill, activity.interval, by ="interval", all.y = F)
activity.fill$steps[which(is.na(activity.fill$steps))] <- as.integer(mean(activity.fill$steps[is.na(activity.fill$steps)]))
activity.steps <- tapply(activity.fill$steps, activity.fill$date, sum)
is.na(activity$steps)
activity.fill <- merge(activity, activitymean, by = "interval")
activity.fill <- activity.fill[, c(1:3)]
head(activity.fill)
activity.fill <- aggregate(steps ~ date, data = activity.fill, FUN = sum)
mean(totalsteps)
median(totalsteps)
activity.fill <- merge(activity, activitymean, by = "interval")
activity.fill <- aggregate(steps.x ~ date, data = activity.fill, FUN = sum)
head(activity.fill)
hist(activity.fill, col = "green", main = "",
xlab = "Total steps per day", breaks = 15)
activity.steps <- aggregate(steps ~ date, activity, FUN = sum)
activity.steps
hist(activity.steps$steps, col = "green", main = "",
xlab = "Total steps per day", breaks = 15)
mean(activity.steps)
activity.fill <- activity
activity.steps <- aggregate(steps.x ~ date -1, data = activity.fill, FUN = sum)
activity.fill <- activity
activity.steps <- aggregate(steps ~ date -1, data = activity.fill, FUN = sum)
head(activity.steps)
head(activity)
activitymean
head(activity.steps)
activity.fill <- merge(activity, activitymean, by = "interval", suffixes = c("", ".y"))
na <- is.na(activity$steps)
activity$step[na] <- activity$steps.y[na]
activity.s <- activity[, c(1:3)]
activity.fill <- merge(activity, activitymean, by = "interval", suffixes = c("", ".y"))
na <- is.na(activity$steps)
activity$step[na] <- activity$steps.y[na]
activity.s <- activity[, c(1:3)]
activity.steps <- aggregate(steps ~ date, activity.s, FUN = sum)
head(activity.steps)
summary(activity.steps)
head(activity.s)
activity.s <- activity[c(1:17568), c(1:3)]
activity.steps <- aggregate(steps ~ date, activity.s, FUN = sum)
summary(activity.steps)
activity.s <- activity[c(1:17568), c(1:3)]
activity.steps <- aggregate(date~steps, activity.s, FUN = sum)
activity.s <- activity[c(1:17568), c(1:3)]
activity.steps <- aggregate(steps ~ date, activity.s, FUN = sum)
head(activity.steps)
activity.steps <- aggregate(x = list(steps = activity.s$steps),
by = list(date = activity.s$date),
FUN = mean)
head(activity)
activity.steps <- aggregate(steps ~ date, activity.s, FUN = sum, na.action = NULL)
head(activity.steps)
median(activity.steps)
median(activity.steps, na.rm = T)
median(activity.steps, na.rm = F
)
activity.steps <- aggregate(steps ~ date, data = activity.fill, FUN = mean)
head(activity.steps)
activity.steps <- aggregate(steps ~ date, data = activity.fill, FUN = mean, na.action = NULL)
head(activity.steps)
activity.steps <- aggregate(steps ~ date, activity.s, FUN = sum, na.rm = T)
head(activity.steps)
head(activity.fill)
head(activity)
na.omit(activity)
a <- for(i in 1:ncol(activity)) {
activity[,i] = ifelse(is.na(activity[,1]),
ave(data[,1], FUN = function(y) mean(y, na.rm = T))
activity[,i])
}
a <- for(i in 1:ncol(activity)) {
activity[,i] = ifelse(is.na(activity[,1]),
ave(data[,1], FUN = function(y) mean(y, na.rm = T)),
activity[,i])
}
a <- for(i in 1:ncol(activity)) {
activity[,i] = ifelse(is.na(activity[,1]),
ave(activity[,1], FUN = function(y) mean(y, na.rm = T)),
activity[,i])
}
head(a)
activityNA <- is.na(activity)
activity(activityNA) <- round(mean(activity, na.rm = T))
activityNA <- is.na(activity)
mydata(activityNA) <- round(mean(activity, na.rm = T))
activityNA <- round(mean(activity, na.rm = T))
sigh <- activity
fill <- function(x) {
na_index <- which(is.na(x))
x[na_index] <- mean_x
return(x)
}
(sigh <- apply(df,2, fill))
sigh <- activity
fill <- function(x) {
na_index <- which(is.na(x))
x[na_index] <- mean_x
return(x)
}
(sigh <- apply(df,3, fill))
sigh <- activity
fill <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averagemean[averagemean$interval == interval, "steps"])
return(filled)
}
filled.data <- sigh
filled.data$steps <- mapply(fill, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN = sum)
head(total.steps)
summary(total.steps)
sigh <- activity
fill <- function(steps, interval) {
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averagemean[averagemean$interval == interval, "steps"])
return(NA)
}
filled.data <- sigh
filled.data$steps <- mapply(fill, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN = sum)
summary(total.steps)
?mapply
sigh <- activity
fill <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (activitymean[activitymean$interval == interval, "steps"])
return(filled)
}
filled.data <- sigh
filled.data$steps <- mapply(fill, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN = sum)
summary(total.steps)
?sapply
?tapply
mean.fill.interval <- function(steps, interval) {
filled.interval <- NA
if (!is.na(steps))
filled.interval <- c(steps)
else
filled.interval <- (activitymean[activitymean$interval == interval, "steps"])
return(filled.interval)
}
activity.fill <- activity
activity.fill$steps <- mapply(mean.fill.interval, activity.fill$steps, activity.fill$interval)
total.steps <- tapply(activity.fill$steps, activity.fill$date, FUN = sum)
activity.steps <- tapply(activity.fill$steps, activity.fill$date, FUN = sum)
summary(activity.steps)
hist(activity.steps$steps, col = "green", main = "",
xlab = "Total steps per day", breaks = 15)
hist(activity.steps, col = "green", main = "",
xlab = "Total steps per day", breaks = 15)
mean(activity.steps)
median(activity.steps)
na.aggregate(activity)
mean.fill <- function(x) replace(x, is.na(x), mean(x), na.rm=T)
replace(activity, TRUE, lapply(activity, mean.fill))
head(activity)
head(activity.s)
activity.s$steps[is.na(activity.s$steps)] <- round(mean(activity.s$steps, na.rm = TRUE))
for(i in 1:ncol(activity.s)) {}
for(i in 1:ncol(activity.s)) {}
for(i in 1:ncol(activity.s)) {activity.s[i][is.na(activity.s[i])] <- round(mean(activity.s[i], na.rm = TRUE))}
for(i in 1:178568(activity.s)) {activity.s[i][is.na(activity.s[i])] <- round(mean(activity.s[i], na.rm = TRUE))}
for(i in 1:178568(activity.s)) {activity.s[is.na(activity.s[,i]), i] <- round(mean(activity.s[,i], na.rm = TRUE))}
?lapply
head(activity.steps)
head(activity.fill)
activity <- read.csv("activity.csv")
mean.fill.interval <- function(steps, interval) {
filled.interval <- NA
if (!is.na(steps))
filled.interval <- c(steps)
else
filled.interval <- (activitymean[activitymean$interval == interval, "steps"])
return(filled.interval)
}
activity.fill <- activity
activity.fill$steps <- mapply(mean.fill.interval, activity.fill$steps,
activity.fill$interval)
activity.steps <- tapply(activity.fill$steps, activity.fill$date, FUN = sum)
head(activity.fill)
activity.fill$date <- as.date(activity.fill$date)
activity.fill$date <- as.Date(activity.fill$date)
activity.day <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {"weekend"}
else {"weekday"}
}
activity.fill$day <- as.factor(sapply(activity.fill$date, activity.day))
head(activity.fill$day)
activity.final <- aggregate(steps ~ interval + day, data=activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) +
geom_line(color = "green") + theme_bw()
facet_grid(day ~ .) +
xlab("5 minute interval") + ylab("Number of steps")
activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) +
geom_line(color = "green") + theme_bw()
facet_grid(day ~ .) + xlab("5 minute interval") + ylab("Number of steps")
head(activity.fill)
?sapply
activity.day <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {"weekend"}
else {"weekday"}
}
activity.fill$day <- as.factor(vapply(activity.fill$date, activity.day))
activity.day <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {"weekend"}
else {"weekday"}
}
activity.fill$day <- as.factor(lapply(activity.fill$date, activity.day))
#Plot
activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) +
geom_line(color = "green") + theme_bw()
facet_grid(day ~ .) + xlab("5 minute interval") + ylab("Number of steps")
activity.day <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {"weekend"}
else {"weekday"}
}
activity.fill$day <- as.factor(apply(activity.fill$date, activity.day))
activity.day <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {"weekend"}
else {"weekday"}
}
activity.fill$day <- as.factor(sapply(activity.fill$date, activity.day))
activity.final <- aggregate(steps ~ interval + day, activity.fill, mean)
ggplot(activity.final, aes(interval, steps)) +
geom_line(color = "green") + theme_bw() +
facet_grid(day ~ .) + xlab("5 minute interval") + ylab("Number of steps")
head(activity.steps)
mean(activity.steps)
median(activity.steps)
head(activity.fill)
head(activity.fill)
head(activity)
getwd()
list.files()
setwd("./instructions_fig")
list.files()
